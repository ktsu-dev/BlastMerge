---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## HEADERS

-   All files must have a header specifying the copyright license (MIT).
-   All top-level classes must have a summary describing their purpose.
-   Always use meaningful names for variables, functions, and classes.
-   Code must be well-commented, explaining non-obvious logic.
-   Fix formatting issues.
-   Before continuing work, always check the current state of the project and run the tests.

## TECH STACK

-   .NET 9.0
-   ktsu.Sdk.CLI/1.33.0
-   System.IO.Abstractions Version="19.2.87"
-   System.IO.Abstractions.TestingHelpers Version="19.2.87"
-   TestableIO.System.IO.Abstractions.Wrappers Version="17.2.26"
-   MSTest
-   Moq Version="4.20.72"
-   TestableIO.System.IO.Abstractions Version="20.0.34"
-   TestableIO.System.IO.Abstractions.TestingHelpers Version="20.0.34"
-   Microsoft.NET.Test.Sdk Version="17.11.1"
-   MSTest.TestAdapter Version="3.6.0"
-   MSTest.TestFramework Version="3.6.0"
-   coverlet.collector Version="6.0.2"
-   Spectre.Console
-   Spectre.Console.Cli
-   System.Text.Json
-   DiffPlex Version="1.7.2"
-   CommandLineParser Version="2.9.1"

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

-   Use SpecStory to generate markdown files documenting user requests and assistant responses.

## CODING STANDARDS

-   Follow Microsoft's C# coding conventions.
-   Use `var` keyword for local variable declarations when the type is obvious.
-   Always handle exceptions gracefully, logging errors and providing informative messages to the user.
-   Validate all method parameters for null values, throwing `ArgumentNullException` when appropriate.
-   Use expression body for methods.
-   Collection initialization can be simplified.
-   When logging or handling exceptions, catch specific exception types (e.g., `IOException`, `UnauthorizedAccessException`) rather than a general `Exception` to provide more targeted error handling.
-   Use `ArgumentNullException.ThrowIfNull` instead of explicitly throwing a new exception instance.
-   Use pattern matching.
-   Follow the .editorconfig file.
-   Private member 'FileHasher.FNV_PRIME_32' is unused (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0051)
-   Private member 'FileHasher.FNV_OFFSET_BASIS_32' is unused (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0051)
-   Parentheses should be added for clarity (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0048)
-   Add braces to 'if' statement. (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0011)
-   In the CLI project, use `AnsiConsole` instead of `System.Console` for console output, as required by the Spectre.Console analyzer. **NOTE:** This rule is superseded by the rule to suppress `Spectre1000` in the CLI project. See "WORKFLOW & RELEASE RULES".
-   Remove unnecessary using directives to keep the code clean and maintainable.
-   Blank line required between block and subsequent statement (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide2003)
-   Use `string.StartsWith(char)` instead of `string.StartsWith(string)` when you have a string with a single char (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1866)
-   Modify methods to catch a more specific allowed exception type, or rethrow the exception (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1031)
-   In externally visible methods, validate parameter is non-null before using it. If appropriate, throw an 'ArgumentNullException' when the argument is 'null'. (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1062)
-   Use `string.Contains(char)` instead of `string.Contains(string)` when searching for a single character (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1847)
-   Use string comparison instead of unicode emoji characters in switch statements.
-   Ensure switch statements are populated (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0072)
-   Use primary constructors (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0290)
-   Change return type of method 'FindDifferences' from 'System.Collections.Generic.IReadOnlyCollection<ktsu.DiffMore.Core.LineDifference>' to 'System.Collections.ObjectModel.ReadOnlyCollection<ktsu.DiffMore.Core.LineDifference>' for improved performance (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1859)
-   'MakeConflictColumnLayout' has a cyclomatic complexity of '49'. Refactor the code to decrease its complexity.
-   The console app must only contain code for input handling and display. All the work must be done in the core library in case we want to implement another type of UI in the future.
-   The current side-by-side diff implementation is incomplete, and the sophisticated version of the `BuildVersionContent` method and supporting methods like `FindLineInFile`, `FindBestMatchingLine`, and `AddContextLinesWithComparison` are missing. These methods must be implemented to ensure proper side-by-side diff display.
-   Post-process the results of `FindDifferences` to detect when a deletion is immediately followed by an insertion at adjacent positions and merge them into a modification.
-   When using `Directory.GetFiles` in `FileFinderAdapter.FindFiles`, be aware that it returns absolute paths. Ensure consistency in path handling by converting paths to relative paths, if necessary, especially in tests using a mock file system.
-   Use the CommandLineParser library for CLI handling.
-   When using records, ensure the constructors are unambiguous. Provide default values for parameters if necessary to avoid constructor conflicts.
-   Use conditional expressions to simplify if-else-if-else chains for better readability.

## FILE & DIRECTORY HANDLING

-   Always ensure that file paths are valid before attempting to access files.
-   Create target directories before copying files.
-   When copying files, handle potential `IOExceptions` and `UnauthorizedAccessException`.
-   Be aware that binary files will be treated as text and should show differences.

## HASHING

-   Use FNV-1a (64-bit version) as the hashing algorithm for file identification.
-   Handle files with different encodings.

## DIFFING

-   Use the DiffPlex library for diffing functionality.
-   Use the Differ.CreateDiffs method with a LineChunker.
-   Generate diff output in a unified format.
-   Color-code the diff output:
    -   Green for added lines
    -   Red for deleted lines
    -   Cyan for chunk headers
    -   Blue for file headers.
-   Show the paths of the compared versions.
-   Implement a change summary diffing mode that shows only lines added or removed between versions.
-   When the user asks to replace the old library with DiffPlex, remove all of the libgit2sharp code and the visualizations, and replace it with the Diffplex library.
-   Display diffs in a side-by-side format with line numbers.
-   Use red on darkred for deleted lines, green on darkgreen for inserted lines, and yellow on darkorange for modified lines.
-   Handle ChangeType.Imaginary lines by ignoring them.
-   When showing the differences put the file with the least number of changes on the left, and instead of calling them version 1, version 2 use the relative directory from the search path.
-   When displaying diffs in a side-by-side format, ensure that the prologue (initial context lines) shows the correct context around the differences, and not hardcoded line numbers. When displaying diffs in a side-by-side format, calculate the correct starting line numbers for the context before the block by using the actual line numbers. Ensure that the context shows the actual context around the differences, and not hardcoded line numbers.
-   Post-process the results of `FindDifferences` to detect when a deletion is immediately followed by an insertion at adjacent positions and merge them into a modification.
-   When using the `DiffPlexDiffer.GenerateColoredDiff` method, be aware that it uses the real file system (`File.Exists()`) instead of the mock file system. When using a mock file system in tests, ensure that `FileDifferAdapter.GenerateColoredDiff` creates temporary files from the mock file system content, similar to how `GenerateGitStyleDiff` handles it.
-   When creating `DiffBlock` instances, ensure the `BlockType` parameter is correctly specified.
-   When using records with init-only properties, create new instances with the correct values instead of modifying the property after creation.

## DEBUGGING

-   When an error occurs, log the error message and rethrow the exception for debugging purposes.
-   When encountering build errors, check the error messages to identify missing package references, incorrect project references, or other dependency-related issues.
-   When using Spectre.Console, avoid running interactive functions (e.g., prompts, progress displays) concurrently to prevent `System.InvalidOperationException`.
-   When tests fail, analyze the test failures by exploring the codebase structure and examining the failing tests to understand what's going wrong.

## UNIT TESTING

-   Write comprehensive unit tests using MSTest.
-   Use a mock filesystem to enable parallel test execution and avoid file system conflicts.
-   Create test cases for different scenarios, including normal usage patterns and edge cases.
-   Use setup and cleanup methods to maintain a clean testing environment.
-   Create tests for performance benchmarking, especially for large files and directories.
-   Implement tests for mock file system operations to verify correct behavior with mocked dependencies.
-   Test file operations with relative paths.
-   Test file operations with paths containing trailing slashes.
-   Test file operations with different casing.
-   Test file operations with multiple search patterns.
-   Test with files in deep directory structures.
-   Test with symbolic links, but skip if the test environment does not support them.
-   When using a mock filesystem, create adapters for core classes that need to interact with the filesystem. These adapters should take an `IFileSystem` instance as a parameter. Example adapters: `FileFinderAdapter`, `FileHasherAdapter`, `FileDifferAdapter`.
-   When using a mock filesystem, tests should inherit from a base class that sets up the mock filesystem environment (e.g., `MockFileSystemTestBase`). This base class should initialize the `MockFileSystem` and provide helper methods for creating files and directories in the mock filesystem.
-   When using a mock filesystem, there is no need for cleanup code in tests, as the virtual filesystem is in memory.
-   When tests use a mock file system, ensure that core classes use adapted versions (e.g., `FileFinderAdapter`, `FileHasherAdapter`, `FileDifferAdapter`) taking an `IFileSystem` instance as a parameter for file system interaction.
-   When tests use a mock file system, initialize adapters (e.g. `FileFinderAdapter`) in the `InitializeFileSystem` override within the derived test class.
-   When tests use a mock file system, initialize file and directory paths in the `InitializeFileSystem` override within the derived test class using the `CreateFile` and `CreateDirectory` methods provided by `MockFileSystemTestBase`.
-   Ensure that test files include `using ktsu.DiffMore.Core;`
-   When writing tests, ensure proper instantiation of static classes. Do not attempt to create instances of static classes directly; instead, access their members directly using the class name.
-   When tests use classes implementing `IDisposable`, ensure the `Dispose` method is properly implemented. The `Dispose` method should call `Dispose(true)`, then call `GC.SuppressFinalize` on the current object instance (`this` or `Me` in Visual Basic), and then return.
-   Use MSTest framework for unit tests.
-   When tests fail due to missing assembly references, add the necessary package references to the test project file (.csproj).
-   If a test project references a namespace from another project, ensure to add a project reference to the corresponding project in the test project file (.csproj).
-   Focus tests on the core library.
-   Remove failing tests until more test coverage is added.
-   Use the `Testable.IO.Abstractions` libraries to enable testing file access properly.
-   When using `FileFinderAdapter` in tests, be aware that `Directory.GetFiles()` returns absolute paths. Ensure consistency in path handling by converting paths to relative paths, if necessary, especially in tests using a mock file system.
-   If a test uses the real file system, it can cause problems with parallel test execution because multiple tests are trying to access the same real files simultaneously. Convert the test to use the mock file system.
-   For performance tests, use unique temp directories per test instance to avoid conflicts during parallel execution while still testing real file I/O.

## WORKFLOW & RELEASE RULES

-   Ensure that all tests pass before releasing a new version.
-   Enable parallel execution for tests to improve performance. This can be configured in the `.runsettings` file by setting `<MaxCpuCount>` to `0` and enabling parallelization in the MSTest adapter:
    ```xml
    <MSTest>
        <Parallelize>
            <Workers>0</Workers>
            <Scope>MethodLevel</Scope>
        </Parallelize>
    </MSTest>
    ```
-   Suppress NuGet warnings `NU1604`, `NU1602`, `NU1701`, and `NU1504` in all project files by adding a `Directory.Build.props` file at the solution root with the following property group:

    ```xml
    <Project>
      <PropertyGroup>
        <!-- Treat package dependency warnings as warnings instead of errors -->
        <WarningsAsErrors />
        <TreatWarningsAsErrors>false</TreatWarningsAsErrors>

        <!-- Suppress specific NuGet warnings that are coming from the ktsu.Sdk packages -->
        <NoWarn>$(NoWarn);NU1604;NU1701;NU1602;NU1504</NoWarn>
        <!-- NU1604: Project dependency does not contain an inclusive lower bound -->
        <!-- NU1701: Package was restored using a different target framework -->
        <!-- NU1602: Does not provide an inclusive lower bound for dependency -->
	    <!-- NU1504: Duplicate PackageReference -->
      </PropertyGroup>
    </Project>
    ```
-   Suppress Spectre Console analyzer errors `Spectre1000` in the CLI project by adding it to the `NoWarn` property in the `Directory.Build.props` file:

    ```xml
        <NoWarn>$(NoWarn);NU1604;NU1602;NU1701;Spectre1000</NoWarn>
    ```
-   The application should have a TUI using Spectre.Console.
-   Implement an iterative merge feature for multiple file versions, where the two most similar versions are found and a visual TUI is offered for resolving the merge. This process is repeated until all versions are merged.
-   During the iterative merge, at each step replace both input files with the merged output.
-   When adding package references, use `dotnet add package <package_name>`
-   When adding project references, use `dotnet add reference <project_path>`
-   The BlastMerge CLI should have command history functionality, allowing users to use arrow keys or tab to navigate through previous inputs. History should be visible to the user.
-   Consider renaming the project to "BlastMerge" to better reflect the merging functionality and align with the existing "explosive" theme of related applications. **NOTE:** This rule is superseded as the project has been renamed to BlastMerge. See "PROJECT RENAMING".
-   Make cross repository file synchronization by iterative merging the primary feature of the app.
-   Remove failing tests until more test coverage is added.
-   Prepare the application for distribution via winget.
-   Modify the existing `Invoke-DotNetPublish` function in `scripts/PSBuild.psm1` to integrate the winget package creation functionality. Remove the separate `New-WingetPackages` function and its call in the release workflow.
-   Ensure that the `Invoke-DotNetPublish` function in `scripts/PSBuild.psm1` has only one `dotnet publish` step, consolidating the previous separate steps for general application and winget package publishing.

## DIRECTORY COMPARISON

-   When comparing directories, the result should include:
    -   `SameFiles`: Files that are identical in both directories.
    -   `ModifiedFiles`: Files that exist in both directories but have different content.
    -   `OnlyInDir1`: Files that exist only in the first directory.
    -   `OnlyInDir2`: Files that exist only in the second directory.

## USER INTERFACE

-   When displaying diffs in a side-by-side format, ensure that the prologue (initial context lines) shows the correct context around the differences, and not hardcoded line numbers. When displaying diffs in a side-by-side format, calculate the correct starting line numbers for the context before the block by using the actual line numbers. Ensure that the context shows the actual context around the differences, and not hardcoded line numbers.
-   When showing the differences put the file with the least number of changes on the left, and instead of calling them version 1, version 2 use the relative directory from the search path.
-   The BlastMerge CLI should have command history functionality, allowing users to use arrow keys or tab to navigate through previous inputs. History should be visible to the user.
-   The BlastMerge CLI should provide the most recently used input for a prompt as a default value.
-   When performing iterative merge, the message that says "Result will replace ProjectDirector (and delete DiffMore)" should just say the result will replace both files.
-   During iterative merge, the message "Result will replace both files" should be displayed.
-   During iterative merge, the message "Merged successfully! Files reduced by 1." should be updated to say "Merged successfully! Versions reduced by 1."
-   During iterative merge, the confirmation prompt should be skipped, and the merge should continue automatically, displaying "Continuing to next merge step..."
-   During iterative merge, the redundant save prompt should be removed and replaced with the message "Final merged result is saved in the remaining file.".
-   During the iterative merge, the version search should be performed again between every iteration.
-   During the iterative merge, when saving the result, the content of every file that has those versions should be replaced.

## PROJECT RENAMING

-   The project has been renamed from "DiffMore" to "BlastMerge". All references to "DiffMore" in the codebase, documentation, and project files must be updated to "BlastMerge".

## NEW PRIMARY FEATURE

- The primary feature of the application is now cross-repository file synchronization through intelligent iterative merging.

- The application is now named BlastMerge

## WINGET DISTRIBUTION

-   The application should be prepared for distribution via winget.
-   The project configuration should be enhanced for publishing:
    -   Set `PublishSingleFile` to `true`.
    -   Set `PublishTrimmed` to `false` (temporarily, until trimming issues are resolved).
    -   Set `EnableCompressionInSingleFile` to `true`.
    -   Set `IncludeNativeLibrariesForSelfExtract` to `true`.
    -   Set `DebugType` to `none`.
    -   Set `DebugSymbols` to `false`.
    -   The application icon (`icon.png`) should be converted to `.ico` format and the `<ApplicationIcon>` line in `BlastMerge.ConsoleApp.csproj` should be uncommented.
-   A GitHub Actions workflow should be integrated with the existing build and release pipeline (PSBuild module in `dotnet.yml`) for building and releasing the application.
    -   The workflow should build for `win-x64`, `win-x86`, and `win-arm64`.
    -   The workflow should create GitHub releases with proper asset naming.
    -   The workflow should generate SHA256 checksums.
    -   The workflow can be triggered manually for testing.
-   Winget manifest files should be created for the package.
-   A PowerShell script (`scripts/update-winget-manifests.ps1`) should be created to automate the winget submission process.
-   A comprehensive README (`winget/README.md`) should be created for the winget distribution setup.
-   A quick-start guide (`docs/winget-quick-start.md`) should be created for the entire winget distribution process.
-   The `Invoke-DotNetPublish` function in `scripts/PSBuild.psm1` should have only one `dotnet publish` step, consolidating the previous separate steps for general application and winget package publishing.
-   The executable name in the winget manifest (`winget/ktsu.BlastMerge.installer.yaml`) should match the actual executable name in the build output directory (e.g., `ktsu.BlastMerge.ConsoleApp.exe`).
- Add a `--version` command-line argument that winget validation requires. When winget calls `blastmerge.exe --version`, it should display the application's version.
- The `HistoryInput.cs` file must handle cases where it cannot create a directory in `ApplicationData`, and should fall back to a temporary directory or the current directory.

## CROSS PLATFORM SUPPORT

-   The application should publish portable zip files for Linux and macOS platforms in addition to Windows, even if they are not included in the winget manifest.

## PUBLISHING RULES

-   The `Invoke-DotNetPublish` function in `scripts/PSBuild.psm1` should have only one `dotnet publish` step, consolidating the previous separate steps for general application and winget package publishing.
-   When publishing, all applications should be published with the same optimized settings (self-contained, single-file, etc.) whether they're for general use or winget packages.
-   Every project should be published for all specified architectures (win-x64, win-x86, win-arm64, linux-x64, linux-arm64, osx-x64, osx-arm64) in a single pass.
-   General application ZIP files should be created for all projects and architectures.
-   SHA256 hashes should be generated for all published packages across all platforms.
-   The staging directory should contain all the packages and the `hashes.txt` file.

## WINGET INSTALLATION

- The executable name in the winget manifest (`winget/ktsu.BlastMerge.installer.yaml`) should match the actual executable name in the build output directory (e.g., `ktsu.BlastMerge.ConsoleApp.exe`).
- The `RelativeFilePath` entry in `winget/ktsu.BlastMerge.installer.yaml` must be `ktsu.BlastMerge.ConsoleApp.exe`, not `BlastMerge.ConsoleApp.exe`.
- The `RelativeFilePath` entry in `scripts/update-winget-manifests.ps1` must be `ktsu.BlastMerge.ConsoleApp.exe`, not `BlastMerge.ConsoleApp.exe`.

## WINGET VALIDATION
- The application must handle the `--version` command-line argument, as required by winget validation.

## COMMAND LINE PARSING

- Use the CommandLineParser library for handling command-line arguments.
- Create a `CommandLineOptions` class to define the available options.
- Use the `[Option]` attribute to define options with short and long names, and help text.
- Use the `[Value]` attribute to define positional arguments.
- Handle parsing errors gracefully and display help information when necessary.
- Use `using var parser = new Parser(...)` to ensure proper disposal of the parser object.

## HISTORY INPUT
- The `HistoryInput.cs` file must handle cases where it cannot create a directory in `ApplicationData`, and should fall back to a temporary directory or the current directory.